@page "/GetDataFromExcel"
@using BILL.ViewModel.Product;
@using BILL.ViewModel.UploadFile;
@using ClientUI.Service.IResponsitories;
@using System.Net.Http.Headers;
@inject IResponsitoriesUpload _ResponsitoriesProduct;
@inject ISnackbar Snackbar;
@inject HttpClient httpClient
@inject IDialogService DialogService
@inject ISnackbar Snackbar;
@inject NavigationManager navigation;
@inject IResponsitoriesProduct _Repositories


<style>

    /* Trong file CSS của bạn */
    .btnFile {
        /* Đặt các thuộc tính CSS mà bạn muốn thay đổi */
        background-color: #007bff; /* Màu nền */
        color: #fff; /* Màu chữ */
        padding: 10px 20px; /* Kích thước và khoảng cách bên trong nút */
        border: none; /* Không có đường viền */
        border-radius: 5px; /* Bo góc */
        cursor: pointer; /* Con trỏ chuột khi di chuột vào */
        /* Thêm các thuộc tính CSS khác tùy ý */
        
    }

        /* Tùy chỉnh giao diện khi di chuột vào */
        .btnFile:hover {
            background-color: #0056b3; /* Màu nền khi hover */
        }

</style>

<PageTitle>Upload Files</PageTitle>

<h1>Import Excel</h1>

<InputFile style="margin-bottom:20px" class="btnFile" OnChange="@OnInputFileChange" accept=".xlsx" />


@if (fileNames.Count > 0 && Lst !=null && Lst.Count() >0)
{
    <div class="row">
        <div class="col-2">
            <MudButton Variant="Variant.Filled" Class="px-3"
                       OnClick="() => OpenAddNewDialog(0)"
                       Color="Color.Primary">
                <MudIcon Icon="@Icons.Material.Filled.Add"></MudIcon>
                Thêm mới
            </MudButton>
        </div>
        <div class="col-6">
            <MudButton Variant="Variant.Filled" Class="px-3"
                       OnClick="SaveDataList"
                       Color="Color.Info">
                <MudIcon Icon="@Icons.Material.Filled.Dataset"></MudIcon>
                Lưu
            </MudButton>
        </div>

    </div>
    <MudTable Items="@Lst" Filter="new Func<ProductVM,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1">

        <ToolBarContent>

            <MudSpacer />
            <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh><MudTableSortLabel SortLabel="nr_field" T="ProductVM">STT</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortLabel="nr_field" T="ProductVM">Name</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortLabel="sign_field" T="ProductVM">Price</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortLabel="name_field" T="ProductVM">Quantity</MudTableSortLabel></MudTh>

            <MudTh>Chức Năng</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="STT">@context.STT</MudTd>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Price">@context.Price</MudTd>
            <MudTd DataLabel="Quantity">@context.Quantity</MudTd>

            <MudTd>
                <MudIconButton Icon="@Icons.Material.Filled.Edit" @onclick="() =>OpenAddNewDialog(context.STT)" Color="Color.Success"></MudIconButton>
                <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="@(() =>OpenDeleteDialogMessage(context.STT))" Color="Color.Error"></MudIconButton>
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[]{50, 100}" />
        </PagerContent>
    </MudTable>


}




@code {


    private string searchString = "";
    private List<ProductVM> Lst;
    private int maxAllowedFiles = int.MaxValue;
    private long maxFileSize = long.MaxValue;
    private List<string> fileNames = new();

    private ProductVM selectedItem1 = null;
    protected async Task loadData()
    {


    }
    protected override async Task OnInitializedAsync()
    {

        await loadData();
    }

    private DialogOptions dialogOptions = new() { CloseButton = true, DisableBackdropClick = true, MaxWidth = MaxWidth.Medium, FullWidth = true };

    private async Task OpenAddNewDialog(int stt)
    {
        var parameters = new DialogParameters();
        string tilteString = "";
        string snackbarMessage = "";
        if (stt == 0)
        {
            tilteString = "Thêm mới ";
            snackbarMessage = "Thêm mới";
            parameters.Add("product", new ProductVM());

        }
        else
        {

            tilteString = "Chỉnh sửa ";
            snackbarMessage = "Chỉnh sửa";
            selectedItem1 = Lst.FirstOrDefault(p => p.STT == stt);
            parameters.Add("product", selectedItem1);
        }
        parameters.Add("Lst", Lst);
        parameters.Add("stt", stt);

        var result = await DialogService.Show<CreateofUpdateExcel>(tilteString, parameters, dialogOptions).Result;
        if (!result.Canceled)
        {
            var success = result.Data as int?;
            if (success == 1)
            {
                Snackbar.Add(snackbarMessage + " thành công!", Severity.Success);

                StateHasChanged();
            }
            else
            {
                Snackbar.Add(snackbarMessage + " thất bại!", Severity.Error);
            }
        }
    }



    private bool FilterFunc1(ProductVM CartDetailVM) => FilterFunc(CartDetailVM, searchString);

    private bool FilterFunc(ProductVM CartDetailVM, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (CartDetailVM.Name != null && CartDetailVM.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }
    private async void OpenDeleteDialogMessage(int id)
    {
        await loadData();
        bool? result = await DialogService.ShowMessageBox(
            "Cảnh báo",
            "Khi xóa sẽ không thể quay lại!",
            yesText: "Xóa bỏ!", noText: "", cancelText: "Hủy bỏ",
            new DialogOptions()
                {
                    CloseButton = true,
                    DisableBackdropClick = true,
                    MaxWidth = MaxWidth.Small,
                    FullWidth = true
                }
        );

        if (result != null)
        {
            selectedItem1 = Lst.FirstOrDefault(p => p.STT == id);
            Lst.Remove(selectedItem1);

            Snackbar.Add("Xóa bỏ thành công!", Severity.Success);
            await loadData();
            StateHasChanged();

        }

    }

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        using var content = new MultipartFormDataContent();

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            var fileContent = new StreamContent(file.OpenReadStream(maxFileSize));
            fileContent.Headers.ContentType = new MediaTypeHeaderValue(file.ContentType);

            fileNames.Add(file.Name);

            content.Add(
                content: fileContent,
                name: "\"files\"",
                fileName: file.Name);
        }
        var result = await _ResponsitoriesProduct.UploadFileExcel(content, default);
        Lst = result;
        if (result != null && result.Count()>0)
        {
            Snackbar.Add("Upload thành công!", Severity.Success);
        }
        else Snackbar.Add("Upload thất bại!", Severity.Error);
    }
    bool check = false;
    private async Task SaveDataList()
    {
        foreach (var item in Lst)
        {
            check = await _Repositories.CreateNewProduct(item);
        }
        if (check)
        {
            Snackbar.Add("Thêm mới thành công!", Severity.Success);
        }
        else
        {
            Snackbar.Add("Thêm mới không thành công!", Severity.Error);
        }
    }

}
