@page "/Admin/Manager/Product"
@using System.Net.Http.Json
@using BILL.ViewModel.Product
@using BLL.ViewModel.ModelConfiguration.SeedWork;
@using ClientUI.Component
@using ClientUI.Service.IResponsitories
@using MudBlazor
@inject IResponsitoriesProduct _ResponsitoriesProduct;
@inject HttpClient httpClient
@inject IDialogService DialogService
@inject ISnackbar Snackbar;
@inject NavigationManager navigation;
@using Microsoft.AspNetCore.SignalR.Client;
@using Microsoft.AspNetCore.Hosting;
    using BLL.ViewModel.ModelConfiguration.SeedWork;
<div class="col-8">
    <h3>Danh sách San Pham </h3>
    <MudButton Variant="Variant.Filled" Class="px-3"
               OnClick="() => OpenAddNewDialog(Guid.Empty)"
               Color="Color.Primary">
        <MudIcon Icon="@Icons.Material.Filled.Add"></MudIcon>
        Thêm mới
    </MudButton>
    <button class="btn btn-primary" @onclick="NavigateToAnotherPage"><MudIcon Icon="@Icons.Material.Filled.Add"></MudIcon>Excel</button>
    <button class="btn btn-primary" @onclick="NavigateToAnotherPage"><MudIcon Icon="@Icons.Material.Filled.ImportExport"></MudIcon>Xuất dữ liệu ra file excel</button>
</div>
<MudTable Items="@pagedData" Filter="new Func<ProductVM,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1">

    <ToolBarContent>
      
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortLabel="nr_field" T="ProductVM">Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="sign_field" T="ProductVM">Price</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="name_field" T="ProductVM">Quantity</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="position_field" T="ProductVM">Status</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="mass_field" T="ProductVM">Description</MudTableSortLabel></MudTh>
        <MudTh>Chức Năng</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Nr">@context.Name</MudTd>
        <MudTd DataLabel="Sign">@context.Price</MudTd>
        <MudTd DataLabel="Name">@context.Quantity</MudTd>
        <MudTd DataLabel="Position">@context.Status</MudTd>
        <MudTd DataLabel="Molar mass">@context.Description</MudTd>
        <MudIconButton Style="color:green" Size="@Size.Medium" Icon="@Icons.Material.Filled.Edit" OnClick="@(() => OpenAddNewDialog(context.Id))" />
       
        <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="@(() =>OpenDeleteDialogMessage(context.Id))" Color="Color.Error"></MudIconButton>
    </RowTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions="new int[]{50, 100}" />
    </PagerContent>
</MudTable>

@code {
    private List<ProductVM> pagedData;
    private MudTable<ProductVM> table;
    private HubConnection hubConnection;
    private string searchString = "";
    private ProductVM selectedItem1 = null;
    public MetaData MetaData { get; set; } = new MetaData();
    protected async Task loadData()
    {
        pagedData = await _ResponsitoriesProduct.GetAllProduct();


    }
    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder().WithUrl(navigation.ToAbsoluteUri("/chatHub")).Build();
        hubConnection.On("ReceiveMessage", () =>
        {
            InvokeAsync(() =>
             {
                 callData();
                 StateHasChanged();
             });
        });
        await hubConnection.StartAsync();
        await loadData();
    }
    private void callData()
    {
        Task.Run(async () =>
        {
            await loadData();
        });
    }
    public void Dispose()
    {
        _ = hubConnection.DisposeAsync();
    }
    private bool FilterFunc1(ProductVM CartDetailVM) => FilterFunc(CartDetailVM, searchString);

    private bool FilterFunc(ProductVM CartDetailVM, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (CartDetailVM.Name != null && CartDetailVM.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }

    private DialogOptions dialogOptions = new() { CloseButton = true, DisableBackdropClick = true, MaxWidth = MaxWidth.Medium, FullWidth = true };

    private async Task OpenAddNewDialog(Guid id)
    {
        var parameters = new DialogParameters();
        string tilteString = "";
        string snackbarMessage = "";
        if (id == Guid.Empty)
        {
            tilteString = "Thêm mới ";
            snackbarMessage = "Thêm mới";
        }
        else
        {

            tilteString = "Chỉnh sửa ";
            snackbarMessage = "Chỉnh sửa";
        }

        parameters.Add("Id", id);



        var result = await DialogService.Show<ProductCreateOrEdit>(tilteString, parameters, dialogOptions).Result;
        if (!result.Canceled)
        {
            var success = result.Data as bool?;
            if (success == true)
            {
                Snackbar.Add(snackbarMessage + " thành công!", Severity.Success);
                await loadData();
                StateHasChanged();
            }
            else
            {
                Snackbar.Add(snackbarMessage + " thất bại!", Severity.Error);
            }
        }
    }
    private async void OpenDeleteDialogMessage(Guid id)
    {
        bool? result = await DialogService.ShowMessageBox(
            "Cảnh báo",
            "Khi xóa sẽ không thể quay lại!",
            yesText: "Xóa bỏ!", noText: "", cancelText: "Hủy bỏ",
            new DialogOptions()
                {
                    CloseButton = true,
                    DisableBackdropClick = true,
                    MaxWidth = MaxWidth.Small,
                    FullWidth = true
                }
        );

        if (result != null)
        {
            result = await _ResponsitoriesProduct.DeleteById(id);

            if (result ?? false)
            {
                Snackbar.Add("Xóa bỏ thành công!", Severity.Success);
                await loadData();
                StateHasChanged();

            }
            else
            {
                Snackbar.Add("Xóa bỏ thất bại!", Severity.Error);
            }
        }

    }
    public void NavigateToAnotherPage()
    {
        navigation.NavigateTo("/GetDataFromExcel"); 
    }
}