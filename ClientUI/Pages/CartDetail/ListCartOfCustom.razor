@page "/Cart"
@using System.Net.Http.Json
@using BILL.ViewModel.Cart
@using BILL.ViewModel.Product
@using ClientUI.Component
@using ClientUI.Service.IResponsitories
@using MudBlazor
@inject HttpClient httpClient
@inject IDialogService DialogService
@inject ISnackbar Snackbar;
@inject IResponsitoriesCartDetail _oCartDetail;

<MudTable Items="@CartDetailVMs" Filter="new Func<CartDetailVM,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Danh sách đơn hàng</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>

        <MudTh>ProductName</MudTh>
        <MudTh>Quantity</MudTh>
        <MudTh>Price</MudTh>
        <MudTh>UrlImage</MudTh>
        <MudTh>Status</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="ProductName">@context.ProductName</MudTd>
        <MudTd DataLabel="Quantity">@context.Quantity</MudTd>
        <MudTd DataLabel="Price">@context.Price</MudTd>
        <MudTd DataLabel="Price">@(context.Price * context.Quantity)</MudTd>
        <MudTd DataLabel="UrlImage"> <MudImage ObjectFit="ObjectFit.Fill" Src="@context.UrlImage" Width="50" Height="50"></MudImage></MudTd>
        <MudTd DataLabel="Status">@context.Status</MudTd>
        <MudIconButton Style="color:green" Size="@Size.Medium" Icon="@Icons.Material.Filled.Edit" OnClick="@(() => OpenAddNewDialog(context.ID))" />
        <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="@(() =>OpenDeleteDialogMessage(context.ID))" Color="Color.Error"></MudIconButton>
    </RowTemplate>
    <PagerContent>

        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    private bool dense = false;
    private bool hover = true;
    private bool striped = false;
    private bool bordered = false;
    private string searchString1 = "";
    private CartDetailVM selectedItem1 = null;
    private HashSet<CartDetailVM> selectedItems = new HashSet<CartDetailVM>();

    private IEnumerable<CartDetailVM> CartDetailVMs = new List<CartDetailVM>();

    private async Task loadData()
    {
        CartDetailVMs = await _oCartDetail.GetAllCartDetail();
    }

    protected override async Task OnInitializedAsync()
    {
        await loadData();
    }
    private DialogOptions dialogOptions = new() { CloseButton = true, DisableBackdropClick = true, MaxWidth = MaxWidth.Medium, FullWidth = true };

    private async void OpenDeleteDialogMessage(Guid id)
    {
        bool? result = await DialogService.ShowMessageBox(
            "Cảnh báo",
            "Khi xóa sẽ không thể quay lại!",
            yesText: "Xóa bỏ!", noText: "", cancelText: "Hủy bỏ",
            new DialogOptions()
                {
                    CloseButton = true,
                    DisableBackdropClick = true,
                    MaxWidth = MaxWidth.Small,
                    FullWidth = true
                }
        );

        if (result != null)
        {
            result = await _oCartDetail.DelCartDetail(id);

            if (result ?? false)
            {
                Snackbar.Add("Xóa bỏ thành công!", Severity.Success);
                await loadData();
                StateHasChanged();

            }
            else
            {
                Snackbar.Add("Xóa bỏ thất bại!", Severity.Error);
            }
        }

    }

    private async Task OpenAddNewDialog(Guid id)
    {
        var parameters = new DialogParameters();
        string tilteString = "";
        string snackbarMessage = "";
        tilteString = "Thêm Sản Phẩm Vào Giỏ Hàng";
        snackbarMessage = "Thêm Sản Phẩm Vào Giỏ Hàng";

        parameters.Add("Id", id);

        var result = await DialogService.Show<AddCart>(tilteString, parameters, dialogOptions).Result;
        if (!result.Canceled)
        {
            var success = result.Data as bool?;
            if (success == true)
            {
                Snackbar.Add(snackbarMessage + " thành công!", Severity.Success);
                await loadData();
                StateHasChanged();
            }
            else
            {
                Snackbar.Add(snackbarMessage + " thất bại!", Severity.Error);
            }
        }
    }

    private bool FilterFunc1(CartDetailVM CartDetailVM) => FilterFunc(CartDetailVM, searchString1);

    private bool FilterFunc(CartDetailVM CartDetailVM, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;

        if (CartDetailVM.ProductName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }
}